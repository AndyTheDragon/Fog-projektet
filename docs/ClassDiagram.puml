@startuml
'https://plantuml.com/class-diagram
!pragma layout smetana

class Main
{
    + void main(String[] args)
}


package "Entities" {
interface IMaterials
{

+ void getMaterials()

}

class Carport
{
- List<IMaterials> materialsList
-int length
-int width
-int height
-boolean hasShed
-RoofType roofType
+ getListOfMaterials()
- int[] calcOptimalBoards(int totalLength, ConstructionWood board1, ConstructionWood board2)
- List<IMaterials> calcFascia()
- List<IMaterials> calcBeam()
- List<IMaterials> calcRafters()
- List<IMaterials> calcPosts()
- List<IMaterials> calcJoists()
- List<IMaterials> calcBargeBoards()
- List<IMaterials> calcBattern()
- List<IMaterials> calcCladding()

}
enum RoofType
{
    FLAT
    SLOPED
}

class User
{
- int salesmanID
- String name
- String email
- String password
- boolean isAdmin
+ constructors()
+ getters()
+ setters()
}
class Customer
{
- int customerID
- String name
- String address
- String zipcode
- String city
- String phoneNumber
- String email
+ constructors()
+ getters()
+ setters()


}
class Order
{
- int orderID
- Customer customer
- User salesPerson
- int price
- int carportWidth;
- int carportLength;
- int shedWidth;
- int shedLength;
- RoofType carportRoof;
- boolean isPaid;
- LocalDateTime createdAt;
- LocalDateTime updatedAt;
- Carport carport;
+ boolean isAssigned()
+ boolean isPaid()
+ boolean hasShed()
+ constructors()
+ getters()
+ setters()
}
class ConstructionWood
{
- final String type
- final int fogProductID
- final int width
- final int height
- final int length
- final int amount
- final String unit
- final String description
+ constructors()
+ @override boolean equals()
+ getters()
}
class RoofCovering
{
- int length
- int amount
- String unit
- String type
- int fogProductID
+ constructors()
+ getters()
}
class BoltsScrewsBrackets
{
- String type
- int fogProductID
- int length
- int width
- int amount
- String unit
+ constructors()
+ getters()


}
}
package "Controllers" {
    class OrderController
    {
    + addRoutes()
    + createOrder()
    + getOrdersByUser()
    + getAllOrders()
    + getOrderById()
    + updateOrder()
    + deleteOrder()
    }
    class UserController
    {
    + addRoutes()
    + login()
    + logout()
    + createUser()
    + getAllUsers()
    }
    class MaterialController
    {
    + addRoutes()
    + createMaterial()
    + getMaterials()
    + getAllMaterials()
    + getMaterialById()
    + updateMaterialPrice()
    + updateMaterialStock()
    + updateMaterial()
    + deleteMaterial()
   }
}
package "Persistence" {
    class OrderMapper
    {
        + createOrder()
        + getOrdersByUser()
        + getAllOrders()
        + getOrderById()
        + updateOrder()
        + deleteOrder()
    }
    class MaterialMapper
    {
        + List<ConstructionWood> getConstructionWoodFromFunction(String function)
        + createMaterial()
        + getMaterials()
        + getAllMaterials()
        + getMaterialById()
        + updateMaterialPrice()
        + updateMaterialStock()
        + updateMaterial()
        + deleteMaterial()
    }
    class UserMapper
    {
        + login()
        + createUser()
        + getAllUsers()
    }
    }

package "Services" {
class SendGrid{}
class WorkDrawing{}
class CarportSketch{}
}

ConstructionWood ..|> IMaterials
RoofCovering ..|> IMaterials
BoltsScrewsBrackets ..|> IMaterials


@enduml
implements ..|>
extends <|-- (is-a)
composition *-- (must-have)
Aggregation o-- (can-have)
Associering <--