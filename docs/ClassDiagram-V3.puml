@startuml
'https://plantuml.com/class-diagram
!pragma layout smetana

class Main
{
+ void main(String[] args)

}


package "Entities"
{
    interface IMaterials
    {
    + int getAmount()
    + String getDescription()
    + int getLength()
    + String getType()
    + String getUnit()
    + int getFogProductID()
    + int getHeight()
    + int getWidth()
    'void getMaterials()
    }

    class Order
    {
        - int orderID
        - Customer customer
        - User salesPerson
        - int carportWidth;
        - int carportLength;
        - int carportHeight;
        - boolean carportShed;
        - int shedWidth;
        - int shedLength;
        - RoofType carportRoof;
        - boolean isPaid;
        - LocalDateTime createdAt;
        - LocalDateTime updatedAt;
        - Carport carport;
        + constructors()
        + boolean isPaid()
        + constructors()
        + boolean getCarportShed()
        + boolean isPaid()
        + getters()
        '+ setters()
        '+ boolean isAssigned()
        '+ boolean hasShed()
    }
    class Carport
    {
    - CarportCalculation calculator
    - WorkDrawing workDrawing
    - List<IMaterials> materialsList
    - List <IMaterials> boltsScrewsBrackets
    - int length
    - int width
    - int height
    - int shedLength
    - int shedWidth
    - RoofType roofType
    - String shedPlacement
    - int numberOfPosts
    - int numberOfJoists
    + Carport ()
    + void calculateMaterials()
    + void calculateBoltsScrewsBrackets()
    + boolean hasShed()
    + int getNumberOfPosts()
    + boolean extraPostsForLongCarport()
    + int getNumberOfJoists()
    + int getNumberOfCladdingBoards()
    + int getHeight()
    + int getLength()
    + List<IMaterials> getMaterialsList()
    + List<IMaterials> getBoltsScrewsBrackets()
    + RoofType getRoofType()
    + void setRoofType()
    + int getShedLength()
    + int getShedWidth()
    + int getWidth()
    + WorkDrawing getWorkDrawing()
    + CarportCalculation getCalculator()
    }
    enum RoofType
    {
    FLAT
    RISEN
    Rooftype getRoofType()
    }

    class User
    {
    - int userID
    - String name
    - String email
    - String password
    - boolean isAdmin
    + constructors()
    + getters()
    + setters()
    + boolean isAdmin()
    }

    class Customer
    {
    - int customerID
    - String name
    - String address
    - String zipcode
    - String city
    - String phoneNumber
    - String email
    + constructors()
    + getters()
    + setters()
    }

    class ConstructionWood
    {
    - final String type
    - final int fogProductID
    - final int width
    - final int height
    - final int length
    - final int amount
    - final String unit
    - final String description
    + ConstructionWood()
    + getters()
    + @override toString()
    }

    class RoofCovering
    {
    - int length
    - int width
    - int amount
    - String unit
    - String type
    - String description
    - int fogProductID
    + RoofCovering()
    + getters()
    + @override getHeight()
    + @override toString()
    }

    class BoltsScrewsBrackets
    {
    - String type
    - int fogProductID
    - int length
    - int width
    - int amount
    - String unit
    - String description
    + BoltsScrewsBrackets()
    + getters()
    + @override getFogProductID()
    + @override getHeight()
    + @override toString()
    }

    interface CarportCalculator
    {
    + List<IMaterials> calcUnderFascia()
    + List<IMaterials> calcOverFascia()
    + List<IMaterials> calcBeam(int length)
    + List<IMaterials> calcRafters()
    + List<IMaterials> calcPosts()
    + int calcNumberOfPosts()
    + boolean extraPostsForLongCarport()
    + List<IMaterials> calcJoists()
    + int calcNumberOfJoists()
    + List<IMaterials> calcBargeBoards()
    +List<IMaterials> calcBattern()
    + List<IMaterials> calcCladding()
    + int calcNumberOfCladdingBoards()
    + List<IMaterials> calcHorizontalBraces()
    + int calcNumberOfHorizontalBraces()
    + List<IMaterials> calcRoof()
    + List<IMaterials> calcRoofScrews()
    + List<IMaterials> calcJoistBrackets()
    + List<IMaterials> calcFasciaBargeScrews()
    + List<IMaterials> calcJoistBracketScrews()
    + List<IMaterials> calcMetalStrap()
    + List<IMaterials> calcBeamBolts()
    + List<IMaterials> calcCladdingScrews()
    + List<IMaterials> doorHandleBrackets()
    + List<IMaterials> calcHorizontalBracesBrackets()
    }

}

package "Controllers" {
    class OrderController
    {
    + static void addRoutes()
    + static void showOrderPage()
    + static void createOrder()
    - static void doLogin()
    - static void showLogin()
    - static void assignOrder()
    - static void showOrderDetails()
    - static void acceptOrder()
    - static void requestChange()
    - static void showDrawing()
    - static void showOrders()
    }
    class UserController
    {
    + static void addRoutes()
    + static void login()
    '+ logout()
    '+ createUser()
    '+ getAllUsers()
    }
    class MaterialController
    {
   ' + addRoutes()
   ' + createMaterial()
   ' + getMaterials()
   ' + getAllMaterials()
   ' + getMaterialById()
   ' + updateMaterialPrice()
    '+ updateMaterialStock()
    '+ updateMaterial()
    '+ deleteMaterial()
   }
}
package "Persistence" {

    class CustomerMapper
    {
        + static int createCustomer()
    }
    class OrderMapper
    {
        '+ createOrder()
        '+ getOrdersByUser()
        + getOrders()
        + getOrder()
        + assignOrder()
        + acceptOrder()
        + saveOrderToDatabase()

       ' + getAllOrders()
       ' + getOrderById()
       ' + updateOrder()
       ' + deleteOrder()
    }
    class MaterialMapper
    {
        + List<IMaterials> getMaterialOfType()
        + List<IMaterials> getMaterialOfTypeAndLength()
        '+ List<ConstructionWood> getConstructionWoodFromFunction()
        '+ createMaterial()
        '+ getMaterials()
        '+ getAllMaterials()
        '+ getMaterialById()
        '+ updateMaterialPrice()
        '+ updateMaterialStock()
        '+ updateMaterial()
        '+ deleteMaterial()
    }
    class UserMapper
    {
        + login()
        '+ createUser()
        '+ getAllUsers()
    }
    }

package "Services" {
    class DrawSVG
    {
    - final String SVG_TEMPLATE
    - final String SVG_ARROW_DEFS
    - final String SVG_RECT_TEMPLATE
    - final String SVG_SLANTED_RECT_TEMPLATE
    - final String SVG_LINE_TEMPLATE
    - final String SVG_TEXT_TEMPLATE
    - final StringBiulder svg

    + DrawSVG()
    + addRectangle()
    + addSlantedRect()
    + addLine()
    + addArrow()
    + addText()
    + addSvg(DrawSVG innerSvg)
    + String toString()
    }
    class SendGrid
    {
    + String static requestChangeEmail()
    }
    class WorkDrawing
    {
    - final DrawSVG topViewDrawing
    - final DrawSVG sideViewDrawing
    - final int carportWidth
    - final int carportLength
    - final int carportHeight
    - final int shedWidth
    - final int shedLength
    - final boolean hasShed
    - final int numberOfJoists
    - final boolean extraPostsForLongCarport
    - final String STYLE
    - final String STYLE_DASHED
    - final int fasciaThickness
    + WorkDrawing ()
    + WorkDrawing ()
    - addBeams()
    - addPosts()
    - addJoists()
    - addFascia()
    - addCladding()
    + String toString()
    + String sideView
    }

    class CarportSketch
    {
    }
}

Main -- MaterialController
Main -- OrderController
Main -- UserController
OrderController -- OrderMapper
UserController -- UserMapper
MaterialController -- MaterialMapper

Order *-- Customer
Order o-- User
Order *-- Carport


RoofCovering *- RoofType

ConstructionWood ..|> IMaterials
RoofCovering ..|> IMaterials
BoltsScrewsBrackets ..|> IMaterials


@enduml
implements ..|>
extends <|-- (is-a)
composition *-- (must-have)
Aggregation o-- (can-have)
Associering <--